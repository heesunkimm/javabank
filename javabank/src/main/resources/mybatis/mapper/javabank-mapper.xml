<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mybatis.javabank.javabank-mapper">
	<!-- 로그인 유저의 입출금 계좌리스트 -->
	<select id="loginUserAccount" parameterType="String" resultType="AccountDTO">
		select depositAccount, category, mainAccount, updateDate, balance
		from (
		    select a.depositAccount, a.category, a.mainAccount, t.balance, t.updateDate,
		           row_number() over (partition by a.depositAccount order by t.updateDate desc) as rn
		    from JB_DEPOSIT a
		    inner join JB_Dtransaction t on a.depositAccount = t.depositAccount
		    WHERE a.userId = #{userId}
		) sub
		where rn = 1
		order by case when mainAccount = 'Y' then 1 else 2 end, updateDate desc
	</select>
	<!-- 로그인 유저의 주거래계좌 정보조회 -->
	<select id="loginUserMainAccountInfo" parameterType="String" resultType="AccountDTO">
	    select depositAccount, category, balance
	    from (
	        select a.depositAccount, a.category, t.balance, 
	               row_number() over (partition by a.depositAccount order by t.updateDate desc) AS rn
	        FROM JB_DEPOSIT a 
	        inner join JB_Dtransaction t on a.depositAccount = t.depositAccount 
	        where a.mainAccount = 'Y' AND a.userId = #{userId}
	    ) sub
	    where rn = 1
	</select>
	<!-- 로그인 유저의 계좌 상세정보조회 -->
	<select id="loginUserAccountInfo" parameterType="java.util.Map" resultType="AccountDTO">
	    select * 
		from (
		    select a.depositAccount, a.category, t.balance, row_number() over (order by t.updateDate desc) as rn
		    from JB_DEPOSIT a 
		    inner join JB_Dtransaction t on a.depositAccount = t.depositAccount 
		    where a.depositAccount = #{depositAccount} and a.userId = #{userId}
		) sub
		where rn = 1
	</select>
	<!-- 로그인 유저의 예적금 계좌리스트 -->
	<select id="loginUserProduct" parameterType="String" resultType="ProductDTO">
		select productAccount, category, balance
	    from (
	        select a.productAccount, a.category, t.balance, row_number() over (partition by a.productAccount order by t.updateDate desc) as rn
	        from JB_PRODUCT a 
	        inner join JB_Ptransaction t on a.productAccount = t.productAccount 
	        where a.userId = #{userId}
	    ) sub
	    where rn = 1
	</select>
	<!-- 로그인 유저이름 가져오기 -->
	<select id="loginUserById" parameterType="String" resultType="UserDTO">
	    select userName, userId from JB_USER where userId = #{userId}
	</select>
	<!-- 계좌번호 중복확인 --> 
	<select id="checkAccount" parameterType="String" resultType="Integer">
		select count(*) from JB_DEPOSIT where depositAccount = #{depositAccount}
	</select>
	<!-- 로그인 유저의 주거래계좌 존재유무 확인 -->
	<select id="loginUserMainAccount" parameterType="java.util.Map" resultType="int">
	    select count(*) from JB_DEPOSIT where mainAccount = #{mainAccount} and userId = #{userId}
	</select>
	<!-- 입출금계좌 생성 -->
    <insert id="addAccount" parameterType="java.util.Map">
    	insert into JB_DEPOSIT 
    	(depositAccount, depositPw, userId, transactionLimit, mainAccount) 
    	values (#{depositAccount}, #{depositPw}, #{userId}, #{transactionLimit}, #{mainAccount})
	</insert>
	<!-- 입출금 거래내역 0원으로 생성 -->
	<insert id="addAccountDetails" parameterType="java.util.Map">
		insert into JB_Dtransaction 
		(accountSeq, depositAccount, userId, type, deltaAmount, balance, transferAccount)
		values (accountSeq.nextval, #{depositAccount}, #{userId}, '개설', 0, 0, #{depositAccount})
	</insert>
	<!-- 입출금계좌 거래내역 조회 -->
	<select id="accountList" parameterType="java.util.Map" resultType="AccountDTO">
		select a.*, t.updateDate, t.deltaAmount, t.type, t.balance, t.depositAccount, t.transferAccount, u.userName, u2.userName as recipientUserId
		from JB_DEPOSIT a
		inner join JB_USER u on a.userId = u.userId
		inner join JB_Dtransaction t on a.depositAccount = t.depositAccount
		left join JB_DEPOSIT d2 on t.transferAccount = d2.depositAccount
		left join JB_USER u2 on d2.userId = u2.userId
		where a.depositAccount = #{depositAccount} and a.userId = #{userId}
		order by t.updateDate desc
		<!-- select a.*, t.updateDate, t.deltaAmount, t.type, t.balance, t.depositAccount, t.transferAccount, u.userName
		from JB_DEPOSIT a
		inner join JB_USER u on a.userId = u.userId
		inner join JB_Dtransaction t on a.depositAccount = t.depositAccount
		where a.depositAccount = #{depositAccount} and a.userId = #{userId}
		order by t.updateDate desc -->
	</select>
	<!-- 로그인 유저의 최근 입출금거래 계좌리스트 -->
	<!-- <select id="recentlyAccountList" parameterType="String" resultType="DtransactionDTO">
	    SELECT *
		FROM (
		    SELECT t.*, ROW_NUMBER() OVER (PARTITION BY transferAccount ORDER BY updateDate DESC) AS rn
		    FROM JB_Dtransaction t
		    WHERE depositAccount = #{depositAccount}
		) 
		WHERE rn = 1
		AND ROWNUM <= 7
		ORDER BY updateDate DESC
	</select> -->
	<!-- db에 존재하는 계좌 체크 -->
	<select id="accountCheck" parameterType="String" resultType="AccountDTO">
		select * from JB_DEPOSIT where depositAccount = #{transferAccount}
	</select>
	<!--  계좌잔액 체크 -->
	<select id="balanceCheck" parameterType="String" resultType="int">
	    select balance from JB_Dtransaction where depositAccount = #{depositAccount} order by updateDate desc fetch first 1 row only
	</select>
	<!-- 비밀번호 일치여부 확인 -->
	<select id="accountPwCheck" parameterType="java.util.Map" resultType="String">
		select depositPw from JB_DEPOSIT where depositAccount = #{depositAccount} and userId = #{userId}
	</select>
	<!-- 송금하기 -->
	<insert id="insertMoney" parameterType="java.util.Map">
		insert into JB_Dtransaction (accountSeq, depositAccount, userId, type, memo, deltaAmount, balance, transferAccount)
		values (accountSeq.nextval, #{depositAccount}, #{userId}, #{type}, #{memo}, #{deltaAmount}, #{balance}, #{transferAccount})
	</insert>
	<select id="getUserIdByAccount" parameterType="String" resultType="String">
        select userId from JB_DEPOSIT where depositAccount = #{depositAccount}
    </select>
</mapper>